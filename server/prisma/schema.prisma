generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String        @db.VarChar(255)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now()) @updatedAt
  Profile      Profile?
  Transactions Transactions?
  Wallet       Wallet?
  Mails         Mails?
}

model Profile {
  id         String   @id @default(uuid())
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  address    String
  age        Int
  country    String
  firstname  String
  lastname   String
  middlename String
  birthday   String
  user       Account  @relation(fields: [user_id], references: [id])
}

model Wallet {
  id              String   @id @default(uuid())
  user_id         String   @unique
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
  currency        String   @default("PHP")
  income_amount   Decimal  @default(0) @db.Decimal(15, 2)
  income_period   String   @default("monthly")
  balance         Decimal  @default(0) @db.Decimal(15, 2)
  user            Account  @relation(fields: [user_id], references: [id])
}

model Transactions {
  id                   String   @id @default(uuid())
  user_id              String   @unique
  transaction_id       String?  @unique
  transaction_type     String?  @default("expenses")
  transaction_date     DateTime @default(now())
  transaction_discount Boolean  @default(false)
  discount_amount      Decimal  @default(0) @db.Decimal(15, 2)
  transaction_tax      Decimal  @default(0) @db.Decimal(15, 2)
  balance              Decimal  @db.Decimal(15, 2)
  transaction_amount   Decimal  @db.Decimal(15, 2)
  remaining_balance    Decimal  @db.Decimal(15, 2)
  user                 Account  @relation(fields: [user_id], references: [id])
}

enum Status {
  READ
  UNREAD
  TRASHED
}

model Attachment {
  file_id String @id @default(uuid())
  file_name String
  file Bytes
  mails Mails?
}

model Mails{
  mail_id                  String @id @default(uuid())
  user_id String @unique
  title String
  sub_title String
  description String
  status Status
  attachment_id String? @unique
  attachment Attachment? @relation(fields: [attachment_id], references: [file_id])
  user Account @relation(fields: [user_id], references: [id])
}
